<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅梦の博客</title>
  
  
  <link href="http://1804040636.github.io/atom.xml" rel="self"/>
  
  <link href="http://1804040636.github.io/"/>
  <updated>2023-01-31T05:07:51.476Z</updated>
  <id>http://1804040636.github.io/</id>
  
  <author>
    <name>溶金落梧桐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构二叉树遍历</title>
    <link href="http://1804040636.github.io/2023/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <id>http://1804040636.github.io/2023/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</id>
    <published>2023-01-31T05:03:09.000Z</published>
    <updated>2023-01-31T05:07:51.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> leafFormat=<span class="number">0</span>;<span class="comment">//控制二叉树叶子节点输出格式 </span></span><br><span class="line"><span class="type">int</span> maxHeight=<span class="number">0</span>;<span class="comment">//计算二叉树高度 </span></span><br><span class="line"><span class="comment">//定义二叉树结构体 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span>* <span class="title">left</span>;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span>* <span class="title">right</span>;</span> </span><br><span class="line"> &#125; BTreeNode;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//建立二叉树 </span></span><br><span class="line">BTreeNode *<span class="title function_">CreateTree</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *t;</span><br><span class="line"><span class="type">char</span> x[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,x);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(x[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>)<span class="comment">//如果输入的为字符0,则退出 </span></span><br><span class="line">    t=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t=(BTreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTreeNode));<span class="comment">//动态申请空间 </span></span><br><span class="line"><span class="built_in">strcpy</span>(t-&gt;data,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t请输入%s结点的左子节点:&quot;</span>,t-&gt;data);</span><br><span class="line">t-&gt;left=CreateTree();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t请输入%s结点的右子节点:&quot;</span>,t-&gt;data);</span><br><span class="line">t-&gt;right=CreateTree();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BTreeNode *T)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,T-&gt;data);<span class="comment">//输出当前根结点 </span></span><br><span class="line">PreOrder(T-&gt;left);<span class="comment">//递归左子树 </span></span><br><span class="line">PreOrder(T-&gt;right);<span class="comment">//递归右子树 </span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BTreeNode *T)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"> </span><br><span class="line">InOrder(T-&gt;left);<span class="comment">//递归左子树 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,T-&gt;data);<span class="comment">//输出当前根结点 </span></span><br><span class="line">InOrder(T-&gt;right);<span class="comment">//递归右子树 </span></span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//后序遍历</span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BTreeNode *T)</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line">  </span><br><span class="line">PostOrder(T-&gt;left);<span class="comment">//递归左子树 </span></span><br><span class="line">PostOrder(T-&gt;right);<span class="comment">//递归右子树 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,T-&gt;data);<span class="comment">//输出当前根结点 </span></span><br><span class="line">  </span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">  <span class="comment">//输出二叉树叶子节点 </span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">printLeaf</span><span class="params">(BTreeNode *T)</span>&#123;<span class="comment">//n记录是第一个叶子节点，如果是第一个，保证输出格式 </span></span><br><span class="line">  <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"><span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//如果为叶子节点 </span></span><br><span class="line"><span class="keyword">if</span>(leafFormat==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t叶子节点为:%s&quot;</span>,T-&gt;data);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s&quot;</span>,T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">leafFormat++;</span><br><span class="line">&#125;</span><br><span class="line">printLeaf(T-&gt;left);</span><br><span class="line">printLeaf(T-&gt;right); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//输出二叉树的叶子结点数</span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Leafnum</span><span class="params">(BTreeNode *T,<span class="type">int</span> *count)</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line">  <span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)<span class="comment">//且左右结点都是空，说明是叶子节点 </span></span><br><span class="line">  *count=*count+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  Leafnum(T-&gt;left,count);</span><br><span class="line">  Leafnum(T-&gt;right,count);</span><br><span class="line">   </span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">//输出二叉树高度 </span></span><br><span class="line">   <span class="type">void</span> <span class="title function_">binaryHeight</span><span class="params">(BTreeNode *T,<span class="type">int</span> h)</span>&#123;<span class="comment">//求高度，一颗子树递归几次，高度就是多少，取最大值 </span></span><br><span class="line">   <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line">  <span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//且左右结点都是空，说明是叶子节点 </span></span><br><span class="line">  maxHeight=maxHeight&gt;h?maxHeight:h;</span><br><span class="line">&#125;</span><br><span class="line">binaryHeight(T-&gt;left,h+<span class="number">1</span>);</span><br><span class="line">binaryHeight(T-&gt;right,h+<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//打印二叉树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBinaryTree</span><span class="params">(BTreeNode *T,<span class="type">int</span> level)</span> &#123; <span class="comment">//层数 </span></span><br><span class="line"><span class="keyword">if</span> (!T) &#123;<span class="comment">//如果为空节点 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;level;i++) &#123; <span class="comment">//打印空格 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);<span class="comment">//输出空节点 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">printBinaryTree(T-&gt;right,level+<span class="number">1</span>);<span class="comment">//右结点 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;level;i++) &#123; <span class="comment">//打印空格 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,T-&gt;data);<span class="comment">//输出当前结点 </span></span><br><span class="line">printBinaryTree(T-&gt;left,level+<span class="number">1</span>);<span class="comment">//递归左结点 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *T=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> ch1,ch2,a;</span><br><span class="line">ch1=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(ch1==<span class="string">&#x27;y&#x27;</span>||ch1==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t二叉树子系统&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t********************&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   1--建立二叉树   &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   2--先序遍历     &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   3--中序遍历     &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   4--后序遍历     &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   5--输出二叉树的叶子结点   &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   6--输出叶子结点数         &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   7--输出二叉树的高度       &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   8--将创建的二叉树以树状形式输出 &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t*   0--退出系统     &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t********************&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t  请输入菜单号(0-7):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;ch2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(ch2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t请按先序序列输入二叉树的结点：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t请输入根节点:&quot;</span>);</span><br><span class="line">T=CreateTree();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t二叉树成功建立\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t该二叉树的先序遍历序列为:&quot;</span>);</span><br><span class="line">            PreOrder(T);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t该二叉树的中序遍历序列为:&quot;</span>);</span><br><span class="line">            InOrder(T);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t该二叉树的后序遍历序列为:&quot;</span>);</span><br><span class="line">            PostOrder(T);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:&#123;</span><br><span class="line">            leafFormat=<span class="number">0</span>; </span><br><span class="line">            printLeaf(T);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:&#123;</span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>,*p=&amp;count;</span><br><span class="line">Leafnum(T,p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t该二叉树叶子节点个数为%d&quot;</span>,count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:&#123;</span><br><span class="line">maxHeight=<span class="number">0</span>; </span><br><span class="line">binaryHeight(T,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t该二叉树高度为%d&quot;</span>,maxHeight);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:&#123;</span><br><span class="line">printBinaryTree(T,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:&#123;</span><br><span class="line">            ch1=<span class="string">&#x27;n&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t输入有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h3><h4 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span>* <span class="title">left</span>;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span>* <span class="title">right</span>;</span> </span><br><span class="line"> &#125; BTreeNode;</span><br></pre></td></tr></table></figure><p>创建结点，每个结点有一个字符数组存数据，同时还有指向左儿子和右儿子的指针</p><h4 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">BTreeNode *<span class="title function_">CreateTree</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *t;</span><br><span class="line"><span class="type">char</span> x[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,x);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(x[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>)<span class="comment">//如果输入的为字符0,则退出 </span></span><br><span class="line">    t=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t=(BTreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTreeNode));<span class="comment">//动态申请空间 </span></span><br><span class="line"><span class="built_in">strcpy</span>(t-&gt;data,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t请输入%s结点的左子节点:&quot;</span>,t-&gt;data);</span><br><span class="line">t-&gt;left=CreateTree();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t请输入%s结点的右子节点:&quot;</span>,t-&gt;data);</span><br><span class="line">t-&gt;right=CreateTree();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建结点时候，如果输入0代表是NULL结点，否则便递归去创建当前结点的左儿子和右儿子，最终以先序遍历的方式去创建整颗二叉树</p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>根左右遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BTreeNode *T)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,T-&gt;data);<span class="comment">//输出当前根结点 </span></span><br><span class="line">PreOrder(T-&gt;left);<span class="comment">//递归左子树 </span></span><br><span class="line">PreOrder(T-&gt;right);<span class="comment">//递归右子树 </span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>到达当前结点后，先输出当前结点的值，如果当前结点有左子树，那么就递归左子树，直到到达null结点开始回溯，然后递归右子树。</p><p>对于递归的每一个结点，都是输出当前结点，然后先递归左子树，再递归右子树</p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>左根右遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BTreeNode *T)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"> </span><br><span class="line">InOrder(T-&gt;left);<span class="comment">//递归左子树 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,T-&gt;data);<span class="comment">//输出当前根结点 </span></span><br><span class="line">InOrder(T-&gt;right);<span class="comment">//递归右子树 </span></span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>到达当前结点后，先递归左子树，直到到达null结点开始回溯，输出当前结点的值，然后递归右子树。</p><p>对于递归的每一个结点，都是先递归左子树，输出当前结点的值，再递归右子树</p><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>左右根</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BTreeNode *T)</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line">  </span><br><span class="line">PostOrder(T-&gt;left);<span class="comment">//递归左子树 </span></span><br><span class="line">PostOrder(T-&gt;right);<span class="comment">//递归右子树 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,T-&gt;data);<span class="comment">//输出当前根结点 </span></span><br><span class="line">  </span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure><p>到达当前结点后，先递归左子树，直到到达null结点开始回溯，然后递归右子树，最后输出当前结点的值。</p><p>对于递归的每一个结点，都是先递归左子树，再递归右子树，最后输出当前结点的值。</p><h4 id="输出叶子节点的值"><a href="#输出叶子节点的值" class="headerlink" title="输出叶子节点的值"></a>输出叶子节点的值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出二叉树叶子节点 </span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">printLeaf</span><span class="params">(BTreeNode *T)</span>&#123;<span class="comment">//n记录是第一个叶子节点，如果是第一个，保证输出格式 </span></span><br><span class="line">  <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"><span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//如果为叶子节点 </span></span><br><span class="line"><span class="keyword">if</span>(leafFormat==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\t\t叶子节点为:%s&quot;</span>,T-&gt;data);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s&quot;</span>,T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">leafFormat++;</span><br><span class="line">&#125;</span><br><span class="line">printLeaf(T-&gt;left);</span><br><span class="line">printLeaf(T-&gt;right); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果到达的一个节点同时没有左子树和右子树，那么便是叶子节点，那么先序遍历的同时判断一下到达的结点是否有左子树和右子树，有的话将其输出，leafFormat是为了判断第一个输出的叶子节点，保持输出格式好看一些</p><h4 id="输出叶子节点的个数"><a href="#输出叶子节点的个数" class="headerlink" title="输出叶子节点的个数"></a>输出叶子节点的个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//输出二叉树的叶子结点数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Leafnum</span><span class="params">(BTreeNode *T,<span class="type">int</span> *count)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"><span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)<span class="comment">//且左右结点都是空，说明是叶子节点 </span></span><br><span class="line">*count=*count+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Leafnum(T-&gt;left,count);</span><br><span class="line">Leafnum(T-&gt;right,count);</span><br><span class="line">  </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>如果到达的一个节点同时没有左子树和右子树，那么便是叶子节点</p><h4 id="二叉树高度"><a href="#二叉树高度" class="headerlink" title="二叉树高度"></a>二叉树高度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//输出二叉树高度 </span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">binaryHeight</span><span class="params">(BTreeNode *T,<span class="type">int</span> h)</span>&#123;<span class="comment">//求高度，一颗子树递归几次，高度就是多少，取最大值 </span></span><br><span class="line"> <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;<span class="comment">//当前结点为空，直接退出函数</span></span><br><span class="line"><span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//且左右结点都是空，说明是叶子节点 </span></span><br><span class="line">maxHeight=maxHeight&gt;h?maxHeight:h;</span><br><span class="line">&#125;</span><br><span class="line">binaryHeight(T-&gt;left,h+<span class="number">1</span>);</span><br><span class="line">binaryHeight(T-&gt;right,h+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>判断一个节点是第多少层，是由上一层递归下来的，于是先序遍历的时候带一个层号，表示当前是第几层，递归的时候层号+1，叶子节点一定是最后一层，对所有的叶子节点的层号判个最大值就是答案。</p><h4 id="打印二叉树"><a href="#打印二叉树" class="headerlink" title="打印二叉树"></a>打印二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印二叉树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBinaryTree</span><span class="params">(BTreeNode *T,<span class="type">int</span> level)</span> &#123; <span class="comment">//层数 </span></span><br><span class="line"><span class="keyword">if</span> (!T) &#123;<span class="comment">//如果为空节点 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;level;i++) &#123; <span class="comment">//打印空格 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);<span class="comment">//输出空节点 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">printBinaryTree(T-&gt;right,level+<span class="number">1</span>);<span class="comment">//右结点 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;level;i++) &#123; <span class="comment">//打印空格 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,T-&gt;data);<span class="comment">//输出当前结点 </span></span><br><span class="line">printBinaryTree(T-&gt;left,level+<span class="number">1</span>);<span class="comment">//递归左结点 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>竖着打印二叉树，右结点在上面，根在中间，左结点在下面，对于每个结点，先递归去右结点，如果为空便打印层号数量的空格，然后输出NULL，回溯到上一层，然后打印上一层，层数数量的空格，再输出结点值再去递归左子树</p>]]></content>
    
    
    <summary type="html">课程设计二叉树遍历</summary>
    
    
    
    <category term="数据结构" scheme="http://1804040636.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="C" scheme="http://1804040636.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C/"/>
    
    
    <category term="C" scheme="http://1804040636.github.io/tags/C/"/>
    
    <category term="数据结构" scheme="http://1804040636.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="课程设计" scheme="http://1804040636.github.io/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>银行家算法课程设计</title>
    <link href="http://1804040636.github.io/2023/01/31/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>http://1804040636.github.io/2023/01/31/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-01-30T20:15:25.000Z</published>
    <updated>2023-01-31T05:03:58.593Z</updated>
    
    <content type="html"><![CDATA[<p>银行家算法代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 操作系统;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 课程设计银行家算法 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">6</span>, M = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> Max[][] = <span class="keyword">new</span> <span class="title class_">int</span>[N][M];<span class="comment">//进程最大所需资源矩阵</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> Allocation[][] = <span class="keyword">new</span> <span class="title class_">int</span>[N][M];<span class="comment">//已分配资源矩阵</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> Need[][] = <span class="keyword">new</span> <span class="title class_">int</span>[N][M];<span class="comment">//进程还需要到资源分配矩阵</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> Available[] = <span class="keyword">new</span> <span class="title class_">int</span>[M];<span class="comment">//当前所拥有资源矩阵</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> safePath[] = <span class="keyword">new</span> <span class="title class_">int</span>[N];<span class="comment">//保存安全序列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> Request[] = <span class="keyword">new</span> <span class="title class_">int</span>[M];<span class="comment">//请求资源向量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> st[] = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">5</span>];<span class="comment">//标记各个输入是否已经输入,nm,Max,Allocation,Need,Available</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;<span class="comment">//记录进程数和每个进程需要的资源数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myInformation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;姓名:%s       班级:%s        学号:%s\n&quot;</span>, <span class="string">&quot;朱浩然&quot;</span>, <span class="string">&quot;20计科8班&quot;</span>, <span class="string">&quot;20220310835&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.输入进程数量与每个资源所需的资源&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2.输入Max矩阵&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3.输入Allocation矩阵&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4.输出Max矩阵&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5.输出Allocation矩阵&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;6.用Max矩阵和Allocation构造Need矩阵&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;7.输出Need矩阵&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;8.输入Available&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;9.输出Available&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;10.判断系统是否安全&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;11.执行银行家算法，申请资源&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;12.重置所有内容&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;13.打印进程状态表&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;14.打印安全序列&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;15.重新打印选项菜单&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;16.退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inputMatrix</span><span class="params">(<span class="type">int</span> a[][], <span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;<span class="comment">//输入矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                a[i][j] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputMatrix</span><span class="params">(<span class="type">int</span> a[][], <span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;<span class="comment">//输出矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                System.out.print(a[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inputVector</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> m)</span> &#123;<span class="comment">//输入向量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            a[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputVector</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> m)</span> &#123;<span class="comment">//输出向量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initNeed</span><span class="params">(<span class="type">int</span> Max[][], <span class="type">int</span> Allocation[][], <span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;<span class="comment">//初始化Need数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                Need[i][j] = Max[i][j] - Allocation[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> work[], <span class="type">int</span> i)</span> &#123;<span class="comment">//判断该进程是否可以被完全分配资源</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (work[j] &lt; Need[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">is_OK</span><span class="params">()</span> &#123;<span class="comment">//寻找安全序列，验证安全性算法</span></span><br><span class="line">        <span class="type">int</span> work[] = <span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M; i++) work[i] = Available[i];<span class="comment">//将可使用数组赋值给work</span></span><br><span class="line">        <span class="type">boolean</span> vis[] = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];<span class="comment">//判断哪个进程被使用</span></span><br><span class="line">        Arrays.fill(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[j] &amp;&amp; check(work, j)) &#123;<span class="comment">//如果该进程未被使用，且可以满足</span></span><br><span class="line">                    t = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t == -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;系统不安全！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[t] = <span class="literal">true</span>;</span><br><span class="line">            safePath[i] = t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                work[j] += Allocation[t][j];<span class="comment">//加上该进程已分配的资源</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> &#123;<span class="comment">//银行家算法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要请求资源的进程&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">processId</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你想要请求的资源&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            Request[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> processId;</span><br><span class="line">        System.out.println(<span class="string">&quot;进程&quot;</span> + t + <span class="string">&quot;执行中&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Request[j] &gt; Need[t][j]) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;申请资源大于进程所需资源&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Available[j] &lt; Request[j]) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;申请资源大于系统所需资源&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            Available[j] = Available[j] - Request[j];<span class="comment">//</span></span><br><span class="line">            Allocation[t][j] = Allocation[t][j] + Request[j];<span class="comment">//已分配资源+新分配资源</span></span><br><span class="line">            Need[t][j] = Need[t][j] - Request[j];<span class="comment">//进程得到了一部分资源，所需资源减少</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> is_OK();</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分配资源失败，退出本次分配&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;<span class="comment">//撤销已分配</span></span><br><span class="line">                Available[j] = Available[j] + Request[j];</span><br><span class="line">                Allocation[t][j] = Allocation[t][j] - Request[j];</span><br><span class="line">                Need[t][j] = Need[t][j] + Request[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;进程&quot;</span> + t + <span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; m; i++) &#123;<span class="comment">//如果一个进程所有请求被满足，释放其所有资源</span></span><br><span class="line">            <span class="keyword">if</span> (Need[t][i] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == m) &#123;<span class="comment">//进程执行完毕</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                Available[j] += Allocation[t][j];<span class="comment">//进程执行完成，释放其资源</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;<span class="comment">//打印进程需求表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;|—————————————————————————————————————————-|\n&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-5s%-19s%-19s%-19s%-20s&quot;</span>, <span class="string">&quot;|进\\资源&quot;</span>, <span class="string">&quot;|       Max        &quot;</span>, <span class="string">&quot;|    Allocation    &quot;</span>, <span class="string">&quot;|       Need       &quot;</span>, <span class="string">&quot;|     Available    |\n&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;|   \\情 |—————————|—————————|—————————|—————————|\n&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;|程  \\况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot; %s &quot;</span>, (<span class="type">char</span>) (<span class="string">&#x27;A&#x27;</span> + j));</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = (M - m) * <span class="number">3</span>;</span><br><span class="line">            printVoid(tmp, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;|-------|—————————|—————————|—————————|—————————|\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;|  P%-3d |&quot;</span>, i);</span><br><span class="line">            printProcessTableMatrix(Max, i);</span><br><span class="line">            printProcessTableMatrix(Allocation, i);</span><br><span class="line">            printProcessTableMatrix(Need, i);</span><br><span class="line">            printProcessTableVector(Available);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;|-------|—————————|—————————|—————————|—————————|\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printProcessTableMatrix</span><span class="params">(<span class="type">int</span> a[][], <span class="type">int</span> i)</span> &#123;<span class="comment">//打印表格中的矩阵数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot; %d &quot;</span>, a[i][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        printVoid((M - m) * <span class="number">3</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printProcessTableVector</span><span class="params">(<span class="type">int</span> a[])</span> &#123;<span class="comment">//打印Available数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot; %d &quot;</span>, Available[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printVoid((M - m) * <span class="number">3</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printVoid</span><span class="params">(<span class="type">int</span> s, <span class="type">char</span> ch)</span> &#123;<span class="comment">//用来循环打印空格</span></span><br><span class="line">        <span class="keyword">while</span> (s-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;<span class="comment">//重置</span></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            Arrays.fill(Max[i], <span class="number">0</span>);</span><br><span class="line">            Arrays.fill(Allocation[i], <span class="number">0</span>);</span><br><span class="line">            Arrays.fill(Need[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.fill(Available, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(st, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        myInformation();</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择:&quot;</span>);</span><br><span class="line">            op = in.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入进程数n和每个进程所需要的资源种类m&quot;</span>);</span><br><span class="line">                n = in.nextInt();</span><br><span class="line">                m = in.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;输入成功&quot;</span>);</span><br><span class="line">                st[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">0</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程数n和每个进程所需要的资源种类m未输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;请输入%d行%d列的Max矩阵\n&quot;</span>, n, m);</span><br><span class="line">                inputMatrix(Max, n, m);<span class="comment">//输入</span></span><br><span class="line">                st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">1</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Max矩阵未被初始化&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;请输入%d行%d列的Allocation矩阵\n&quot;</span>, n, m);</span><br><span class="line">                inputMatrix(Allocation, n, m);<span class="comment">//输入</span></span><br><span class="line">                st[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">1</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Max矩阵未被初始化&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出Max矩阵&quot;</span>);</span><br><span class="line">                outputMatrix(Max, n, m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">2</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Allocation矩阵未被初始化&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出Allocation矩阵&quot;</span>);</span><br><span class="line">                outputMatrix(Allocation, n, m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">1</span>] || !st[<span class="number">2</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Max矩阵或Allocation矩阵还未初始化&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                initNeed(Max, Allocation, n, m);<span class="comment">//初始化Need矩阵</span></span><br><span class="line">                st[<span class="number">3</span>] = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;Need矩阵初始化成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">3</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Need矩阵未初始化&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出Need矩阵&quot;</span>);</span><br><span class="line">                outputMatrix(Need, n, m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">8</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入Available序列&quot;</span>);</span><br><span class="line">                inputVector(Available, m);</span><br><span class="line">                st[<span class="number">4</span>] = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[<span class="number">4</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Available未被初始化&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出Available矩阵&quot;</span>);</span><br><span class="line">                outputVector(Available, m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(st[<span class="number">0</span>] &amp;&amp; st[<span class="number">1</span>] &amp;&amp; st[<span class="number">2</span>] &amp;&amp; st[<span class="number">3</span>] &amp;&amp; st[<span class="number">4</span>])) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;前置资源未初始化完毕&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> is_OK();</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;系统安全&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">11</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(st[<span class="number">0</span>] &amp;&amp; st[<span class="number">1</span>] &amp;&amp; st[<span class="number">2</span>] &amp;&amp; st[<span class="number">3</span>] &amp;&amp; st[<span class="number">4</span>])) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;前置资源未初始化完毕&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                solve();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">12</span>) &#123;</span><br><span class="line">                clear();</span><br><span class="line">                System.out.println(<span class="string">&quot;重置成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">13</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(st[<span class="number">0</span>] &amp;&amp; st[<span class="number">1</span>] &amp;&amp; st[<span class="number">2</span>] &amp;&amp; st[<span class="number">3</span>] &amp;&amp; st[<span class="number">4</span>])) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;前置资源未初始化完毕&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                display();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">14</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;打印安全序列&quot;</span>);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> is_OK();</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;安全序列为:&quot;</span>);</span><br><span class="line">                    outputVector(safePath, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">15</span>) &#123;</span><br><span class="line">                menu();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">16</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请选择合法操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">课程设计银行家算法的代码</summary>
    
    
    
    <category term="操作系统" scheme="http://1804040636.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="java" scheme="http://1804040636.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/java/"/>
    
    
    <category term="课程设计" scheme="http://1804040636.github.io/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="java" scheme="http://1804040636.github.io/tags/java/"/>
    
    <category term="操作系统" scheme="http://1804040636.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
